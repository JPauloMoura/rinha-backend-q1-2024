# worker_processes 5;  ## Default: 1

events {
    worker_connections 9000;
    # otimizado para atender muitos clientes com cada thread, essencial para Linux - para ambiente de testes 
    use epoll ;

    # aceita tantas conexões quanto possível, pode inundar as conexões do trabalhador se definido como muito baixo - para ambiente de teste 
    multi_accept on ;
}

http {
    proxy_read_timeout 300s;
    proxy_connect_timeout 300s;
    # para aumentar a E/S no HDD, podemos desabilitar os logs de acesso 
    access_log off;
    # copia dados entre um FD e outro de dentro do kernel 
    # mais rápido que read() + write() 
    sendfile on ;
    # envia cabeçalhos inteiros, é melhor do que enviá-los um por um 
    tcp_nopush on ;
    # não armazena em buffer os dados enviados, bom para pequenas rajadas de dados em tempo real 
    tcp_nodelay on ;

    upstream api {
        server api-01:3001;
        server api-02:3001;
    }

    server {
        listen 9999;
        
        location / {
            proxy_pass http://api;
        }
    }
    
    # permite que o servidor feche a conexão no cliente que não está respondendo, isso liberará memória 
    reset_timedout_connection on ;

    # solicitação expirou -- padrão 60 
    client_body_timeout  10;

    # se o cliente parar de responder, libere memória -- padrão 60 
    send_timeout  5;

    # o servidor fechará a conexão após esse período -- padrão 75 
    keepalive_timeout  30;

    # número de solicitações que o cliente pode fazer em keep-alive -- para ambiente de teste 
    keepalive_requests  100000 ;

    upstream profiler {
        server api-01:3333;
        server api-02:3333;
    }

    server {
        listen 9998;
        
        location / {
            proxy_pass http://profiler;
        }
    }
}
